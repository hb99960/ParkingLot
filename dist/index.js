import fs from 'fs';
import { join } from 'path';
import readLine from 'readline';
import { ParkingLotController } from './ParkingLotController';
import { CommandController } from './CommandController';
function readCommand() {
    const fileName = process.argv[2];
    // console.log(fileName);
    const file = join(process.cwd(), fileName);
    if (!fs.existsSync(file)) {
        throw new Error(`${file} File not found`);
    }
    const rl = readLine.createInterface({
        input: fs.createReadStream(file)
    });
    const parkingLotController = new ParkingLotController();
    const commandController = new CommandController(parkingLotController);
    rl.on('line', (data) => {
        const [command, ...args] = data.split(' ');
        console.log(`COMMAND>> ${command} [${args.map(arg => `'${arg}'`).join(', ')}]`);
        if (command === 'exit') {
            console.log('Exiting!!');
            return rl.close();
        }
        let resp = '';
        try {
            resp = commandController.executeCommand(command, ...args);
        }
        catch (e) {
            resp = 'Unknow Error';
            if (e instanceof Error) {
                resp = e.message;
            }
        }
        finally {
            console.log('RESPONSE>>', resp);
        }
    });
}
readCommand();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3hELFNBQVMsV0FBVztJQUNoQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLHlCQUF5QjtJQUN6QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksaUJBQWlCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQztRQUNoQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztLQUNuQyxDQUFDLENBQUE7SUFDRixNQUFNLG9CQUFvQixHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztJQUN4RCxNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN0RSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBRW5CLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxPQUFPLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWhGLElBQUksT0FBTyxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekIsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQztZQUNELElBQUksR0FBRyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDVCxJQUFJLEdBQUcsY0FBYyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRSxDQUFDO2dCQUNyQixJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtZQUNwQixDQUFDO1FBQ0wsQ0FBQztnQkFBUyxDQUFDO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQztJQUVMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELFdBQVcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCByZWFkTGluZSBmcm9tICdyZWFkbGluZSc7XG5pbXBvcnQgeyBQYXJraW5nTG90Q29udHJvbGxlciB9IGZyb20gJy4vUGFya2luZ0xvdENvbnRyb2xsZXInO1xuaW1wb3J0IHsgQ29tbWFuZENvbnRyb2xsZXIgfSBmcm9tICcuL0NvbW1hbmRDb250cm9sbGVyJztcblxuXG5mdW5jdGlvbiByZWFkQ29tbWFuZCgpIHtcbiAgICBjb25zdCBmaWxlTmFtZSA9IHByb2Nlc3MuYXJndlsyXTtcbiAgICAvLyBjb25zb2xlLmxvZyhmaWxlTmFtZSk7XG4gICAgY29uc3QgZmlsZSA9IGpvaW4ocHJvY2Vzcy5jd2QoKSwgZmlsZU5hbWUpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhmaWxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZmlsZX0gRmlsZSBub3QgZm91bmRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBybCA9IHJlYWRMaW5lLmNyZWF0ZUludGVyZmFjZSh7XG4gICAgICAgIGlucHV0OiBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGUpXG4gICAgfSlcbiAgICBjb25zdCBwYXJraW5nTG90Q29udHJvbGxlciA9IG5ldyBQYXJraW5nTG90Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IGNvbW1hbmRDb250cm9sbGVyID0gbmV3IENvbW1hbmRDb250cm9sbGVyKHBhcmtpbmdMb3RDb250cm9sbGVyKTtcbiAgICBybC5vbignbGluZScsIChkYXRhKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBbY29tbWFuZCwgLi4uYXJnc10gPSBkYXRhLnNwbGl0KCcgJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBDT01NQU5EPj4gJHtjb21tYW5kfSBbJHthcmdzLm1hcChhcmcgPT4gYCcke2FyZ30nYCkuam9pbignLCAnKX1dYCk7XG5cbiAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdleGl0Jykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0V4aXRpbmchIScpO1xuICAgICAgICAgICAgcmV0dXJuIHJsLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3AgPSAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3AgPSBjb21tYW5kQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChjb21tYW5kLCAuLi5hcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVzcCA9ICdVbmtub3cgRXJyb3InO1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIHJlc3AgPSBlLm1lc3NhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRVNQT05TRT4+JywgcmVzcCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSk7XG59XG5cbnJlYWRDb21tYW5kKCk7Il19