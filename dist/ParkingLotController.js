import { ParkingLot } from "./ParkingLot";
import { RandomParkingStrategy } from "./RandomParkingStrategy";
import { VehicleType } from "./type";
import { Vehicle } from "./Vehicle";
export class ParkingLotController {
    parkingLot;
    createParkingLot(id, totalFloors, totalSlots) {
        if (this.parkingLot) {
            throw new Error('ParkingLot already exists');
        }
        this.parkingLot = new ParkingLot(id, new RandomParkingStrategy);
        this.parkingLot.addFloors(totalFloors);
        const floors = this.parkingLot.floors;
        floors.forEach(floor => {
            for (let ind = 0; ind < totalSlots; ind++) {
                const vehicleType = ind === 0 ? VehicleType.TRUCK : ind <= 2 ? VehicleType.BIKE : VehicleType.CAR;
                floor.addSlot(vehicleType);
            }
        });
        return `Created parking Lot with ${totalFloors} floors and ${totalSlots} slots per floor`;
    }
    parkVehicle(vType, regNo, color) {
        const vehicleType = VehicleType[vType];
        const vehicle = new Vehicle(vehicleType, regNo, color);
        const ticket = this.parkingLot.parkVehicle(vehicle);
        if (ticket) {
            return `Parked vehicle. Ticket ID: ${ticket.id}`;
        }
        return "Parking Lot full";
    }
    unparkVehcile(ticketId) {
        return this.parkingLot.unparkVehicle(ticketId);
    }
    display(displayType, vType) {
        const vehicleType = VehicleType[vType];
        let data;
        switch (displayType) {
            case 'free_slots':
            // console.log(displayType);
            case 'free_count':
                // console.log(displayType);
                data = this.parkingLot.getFreeSlots(vehicleType, displayType === 'free_slots');
                // console.log(`data is ${data}`);
                break;
            case 'occupied_slots':
                // console.log(displayType);
                data = this.parkingLot.getOccupiedSlots(vehicleType);
                break;
        }
        let resp = '';
        if (data) {
            Object.entries(data).forEach(d => {
                // console.log(data);
                const [floor, slotsOrCount] = d;
                resp += printSlotsData(displayType, vehicleType, floor, slotsOrCount) + '\n';
            });
        }
        return resp;
    }
}
function printSlotsData(displayType, vehicleType, floor, slotsOrCount) {
    switch (displayType) {
        case 'free_slots':
            return `No. of free slots for ${vehicleType} on Floor ${floor}: ${slotsOrCount.map(slot => slot.id)}`;
        case 'free_count':
            return `Free slots for ${vehicleType} on Floor ${floor}: ${slotsOrCount}`;
        case 'occupied_slots':
            return `Occupied slots for ${vehicleType} on Floor ${floor}: ${slotsOrCount.map(slot => slot.id)}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFya2luZ0xvdENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUGFya2luZ0xvdENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsV0FBVyxFQUFTLE1BQU0sUUFBUSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsTUFBTSxPQUFPLG9CQUFvQjtJQUM3QixVQUFVLENBQWE7SUFFdkIsZ0JBQWdCLENBQUMsRUFBUyxFQUFFLFdBQWtCLEVBQUUsVUFBaUI7UUFDN0QsSUFBRyxJQUFJLENBQUMsVUFBVSxFQUFDLENBQUM7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLHFCQUFxQixDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFFdEMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUMsRUFBRTtZQUNwQixLQUFJLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxFQUFDLENBQUM7Z0JBQ3BDLE1BQU0sV0FBVyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7Z0JBQ2pHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDL0IsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyw0QkFBNEIsV0FBVyxlQUFlLFVBQVUsa0JBQWtCLENBQUM7SUFDOUYsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFZLEVBQUUsS0FBWSxFQUFFLEtBQVk7UUFFaEQsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQWlDLENBQUMsQ0FBQztRQUVuRSxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXZELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXBELElBQUcsTUFBTSxFQUFDLENBQUM7WUFDUCxPQUFPLDhCQUE4QixNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckQsQ0FBQztRQUVELE9BQU8sa0JBQWtCLENBQUM7SUFDOUIsQ0FBQztJQUVELGFBQWEsQ0FBQyxRQUFlO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELE9BQU8sQ0FBQyxXQUFrQixFQUFFLEtBQVk7UUFDcEMsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQWlDLENBQUMsQ0FBQztRQUNuRSxJQUFJLElBQUksQ0FBQztRQUNULFFBQU8sV0FBVyxFQUFFLENBQUM7WUFFakIsS0FBSyxZQUFZLENBQUM7WUFDZCw0QkFBNEI7WUFDaEMsS0FBSyxZQUFZO2dCQUNiLDRCQUE0QjtnQkFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxXQUFXLEtBQUssWUFBWSxDQUFDLENBQUM7Z0JBQy9FLGtDQUFrQztnQkFDbEMsTUFBTTtZQUNWLEtBQUssZ0JBQWdCO2dCQUNqQiw0QkFBNEI7Z0JBQzVCLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNO1FBQ2QsQ0FBQztRQUVELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksSUFBSSxFQUFFLENBQUM7WUFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDN0IscUJBQXFCO2dCQUNyQixNQUFNLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxJQUFJLGNBQWMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDakYsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBRUQsU0FBUyxjQUFjLENBQUMsV0FBbUIsRUFBRSxXQUFtQixFQUFFLEtBQWEsRUFBRSxZQUFvQztJQUNqSCxRQUFPLFdBQVcsRUFBRSxDQUFDO1FBQ2pCLEtBQUssWUFBWTtZQUNiLE9BQU8seUJBQXlCLFdBQVcsYUFBYSxLQUFLLEtBQU0sWUFBNkIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM1SCxLQUFLLFlBQVk7WUFDYixPQUFPLGtCQUFrQixXQUFXLGFBQWEsS0FBSyxLQUFLLFlBQVksRUFBRSxDQUFDO1FBQzlFLEtBQUssZ0JBQWdCO1lBQ2pCLE9BQU8sc0JBQXNCLFdBQVcsYUFBYSxLQUFLLEtBQU0sWUFBNkIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3SCxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcmtpbmdMb3QgfSBmcm9tIFwiLi9QYXJraW5nTG90XCI7XG5pbXBvcnQgeyBSYW5kb21QYXJraW5nU3RyYXRlZ3kgfSBmcm9tIFwiLi9SYW5kb21QYXJraW5nU3RyYXRlZ3lcIjtcbmltcG9ydCB7IFZlaGljbGVUeXBlLCBJU2xvdCB9IGZyb20gXCIuL3R5cGVcIjtcbmltcG9ydCB7IFZlaGljbGUgfSBmcm9tIFwiLi9WZWhpY2xlXCI7XG5cbmV4cG9ydCBjbGFzcyBQYXJraW5nTG90Q29udHJvbGxlcntcbiAgICBwYXJraW5nTG90ITpQYXJraW5nTG90O1xuXG4gICAgY3JlYXRlUGFya2luZ0xvdChpZDpzdHJpbmcsIHRvdGFsRmxvb3JzOm51bWJlciwgdG90YWxTbG90czpudW1iZXIpe1xuICAgICAgICBpZih0aGlzLnBhcmtpbmdMb3Qpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJraW5nTG90IGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJraW5nTG90ID0gbmV3IFBhcmtpbmdMb3QoaWQsIG5ldyBSYW5kb21QYXJraW5nU3RyYXRlZ3kpO1xuXG4gICAgICAgIHRoaXMucGFya2luZ0xvdC5hZGRGbG9vcnModG90YWxGbG9vcnMpO1xuXG4gICAgICAgIGNvbnN0IGZsb29ycyA9IHRoaXMucGFya2luZ0xvdC5mbG9vcnM7XG5cbiAgICAgICAgZmxvb3JzLmZvckVhY2goIGZsb29yID0+IHtcbiAgICAgICAgICAgIGZvcihsZXQgaW5kID0gMDsgaW5kPHRvdGFsU2xvdHM7IGluZCsrKXtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZWhpY2xlVHlwZSA9IGluZCA9PT0gMCA/IFZlaGljbGVUeXBlLlRSVUNLIDogaW5kIDw9MiA/IFZlaGljbGVUeXBlLkJJS0UgOiBWZWhpY2xlVHlwZS5DQVI7XG4gICAgICAgICAgICAgICAgZmxvb3IuYWRkU2xvdCh2ZWhpY2xlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGBDcmVhdGVkIHBhcmtpbmcgTG90IHdpdGggJHt0b3RhbEZsb29yc30gZmxvb3JzIGFuZCAke3RvdGFsU2xvdHN9IHNsb3RzIHBlciBmbG9vcmA7XG4gICAgfVxuXG4gICAgcGFya1ZlaGljbGUodlR5cGU6c3RyaW5nLCByZWdObzpzdHJpbmcsIGNvbG9yOnN0cmluZyl7XG5cbiAgICAgICAgY29uc3QgdmVoaWNsZVR5cGUgPSBWZWhpY2xlVHlwZVt2VHlwZSBhcyBrZXlvZiB0eXBlb2YgVmVoaWNsZVR5cGVdO1xuXG4gICAgICAgIGNvbnN0IHZlaGljbGUgPSBuZXcgVmVoaWNsZSh2ZWhpY2xlVHlwZSwgcmVnTm8sIGNvbG9yKTtcblxuICAgICAgICBjb25zdCB0aWNrZXQgPSB0aGlzLnBhcmtpbmdMb3QucGFya1ZlaGljbGUodmVoaWNsZSk7XG5cbiAgICAgICAgaWYodGlja2V0KXtcbiAgICAgICAgICAgIHJldHVybiBgUGFya2VkIHZlaGljbGUuIFRpY2tldCBJRDogJHt0aWNrZXQuaWR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBcIlBhcmtpbmcgTG90IGZ1bGxcIjtcbiAgICB9XG5cbiAgICB1bnBhcmtWZWhjaWxlKHRpY2tldElkOnN0cmluZyl7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmtpbmdMb3QudW5wYXJrVmVoaWNsZSh0aWNrZXRJZCk7XG4gICAgfVxuXG4gICAgZGlzcGxheShkaXNwbGF5VHlwZTpzdHJpbmcsIHZUeXBlOnN0cmluZyl7XG4gICAgICAgIGNvbnN0IHZlaGljbGVUeXBlID0gVmVoaWNsZVR5cGVbdlR5cGUgYXMga2V5b2YgdHlwZW9mIFZlaGljbGVUeXBlXTtcbiAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgIHN3aXRjaChkaXNwbGF5VHlwZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdmcmVlX3Nsb3RzJzpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkaXNwbGF5VHlwZSk7XG4gICAgICAgICAgICBjYXNlICdmcmVlX2NvdW50JzpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkaXNwbGF5VHlwZSk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMucGFya2luZ0xvdC5nZXRGcmVlU2xvdHModmVoaWNsZVR5cGUsIGRpc3BsYXlUeXBlID09PSAnZnJlZV9zbG90cycpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBkYXRhIGlzICR7ZGF0YX1gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29jY3VwaWVkX3Nsb3RzJzpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkaXNwbGF5VHlwZSk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMucGFya2luZ0xvdC5nZXRPY2N1cGllZFNsb3RzKHZlaGljbGVUeXBlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwID0gJyc7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhKS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IFtmbG9vciwgc2xvdHNPckNvdW50XSA9IGQ7XG4gICAgICAgICAgICAgICAgcmVzcCArPSBwcmludFNsb3RzRGF0YShkaXNwbGF5VHlwZSwgdmVoaWNsZVR5cGUsIGZsb29yLCBzbG90c09yQ291bnQpICsgJ1xcbic7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRTbG90c0RhdGEoZGlzcGxheVR5cGU6IHN0cmluZywgdmVoaWNsZVR5cGU6IHN0cmluZywgZmxvb3I6IHN0cmluZywgc2xvdHNPckNvdW50PzogQXJyYXk8SVNsb3Q+IHwgbnVtYmVyKSB7XG4gICAgc3dpdGNoKGRpc3BsYXlUeXBlKSB7XG4gICAgICAgIGNhc2UgJ2ZyZWVfc2xvdHMnIDpcbiAgICAgICAgICAgIHJldHVybiBgTm8uIG9mIGZyZWUgc2xvdHMgZm9yICR7dmVoaWNsZVR5cGV9IG9uIEZsb29yICR7Zmxvb3J9OiAkeyhzbG90c09yQ291bnQgYXMgQXJyYXk8SVNsb3Q+KS5tYXAoc2xvdCA9PiBzbG90LmlkKX1gO1xuICAgICAgICBjYXNlICdmcmVlX2NvdW50JyA6XG4gICAgICAgICAgICByZXR1cm4gYEZyZWUgc2xvdHMgZm9yICR7dmVoaWNsZVR5cGV9IG9uIEZsb29yICR7Zmxvb3J9OiAke3Nsb3RzT3JDb3VudH1gO1xuICAgICAgICBjYXNlICdvY2N1cGllZF9zbG90cycgOlxuICAgICAgICAgICAgcmV0dXJuIGBPY2N1cGllZCBzbG90cyBmb3IgJHt2ZWhpY2xlVHlwZX0gb24gRmxvb3IgJHtmbG9vcn06ICR7KHNsb3RzT3JDb3VudCBhcyBBcnJheTxJU2xvdD4pLm1hcChzbG90ID0+IHNsb3QuaWQpfWA7XG4gICAgfVxufVxuIl19