import { Floor } from "./Floor";
import { TicketController } from "./TicketController";
export class ParkingLot {
    id;
    parkingStrategy;
    floors;
    constructor(id, parkingStrategy) {
        this.id = id;
        this.parkingStrategy = parkingStrategy;
        this.floors = [];
    }
    // add floors, addslots
    setParkingStrategy(parkingStrategy) {
        this.parkingStrategy = parkingStrategy;
    }
    // addFloors
    addFloors(floors) {
        for (let i = 1; i <= floors; i++) {
            this.floors.push(new Floor(i));
        }
    }
    parkVehicle(vehicle) {
        const slotToBook = this.parkingStrategy.park(this.floors, vehicle);
        if (slotToBook) {
            // return ticket
            const ticket = TicketController.generateTicket(this.id, slotToBook.id, slotToBook.floorId, vehicle);
            return ticket;
        }
    }
    unparkVehicle(ticketId) {
        const ticket = TicketController.getTicketWithId(ticketId);
        if (ticket) {
            const [_parkingLotId, floorId, slotId] = ticketId.split('_');
            const floor = this.floors[Number(floorId) - 1];
            const slot = floor.slots[Number(slotId) - 1];
            slot.release();
            TicketController.deleteTicket(ticketId);
            return `Unparked vehicle with Registration Number : ${ticket.vehicle.regNo} and Color: ${ticket.vehicle.color}`;
        }
        return "Invalid ticket";
    }
    getFreeSlots(vehicleType, showSlots = false) {
        const floors = this.floors;
        const freeSlots = {};
        floors.forEach(floor => {
            const availableSlots = floor.getAvailableSlots(vehicleType);
            freeSlots[floor.id] = showSlots ? availableSlots : availableSlots.length;
        });
        return freeSlots;
    }
    getOccupiedSlots(vehicleType) {
        const floors = this.floors;
        const occupiedSlots = {};
        floors.forEach(floor => {
            occupiedSlots[floor.id] = floor.getOccupiedSlots(vehicleType);
        });
        return occupiedSlots;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFya2luZ0xvdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9QYXJraW5nTG90LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJdEQsTUFBTSxPQUFPLFVBQVU7SUFDbkIsRUFBRSxDQUFRO0lBQ1YsZUFBZSxDQUFtQjtJQUNsQyxNQUFNLENBQWlCO0lBRXZCLFlBQVksRUFBUyxFQUFFLGVBQWdDO1FBQ25ELElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELHVCQUF1QjtJQUV2QixrQkFBa0IsQ0FBQyxlQUFnQztRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsWUFBWTtJQUNaLFNBQVMsQ0FBQyxNQUFhO1FBQ25CLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7SUFDTCxDQUFDO0lBSUQsV0FBVyxDQUFDLE9BQWdCO1FBRXhCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbkUsSUFBRyxVQUFVLEVBQUMsQ0FBQztZQUNYLGdCQUFnQjtZQUNoQixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFcEcsT0FBTyxNQUFNLENBQUE7UUFDakIsQ0FBQztJQUVMLENBQUM7SUFFRCxhQUFhLENBQUMsUUFBZTtRQUN6QixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUQsSUFBRyxNQUFNLEVBQUMsQ0FBQztZQUNQLE1BQU0sQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXhDLE9BQU8sK0NBQStDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxlQUFlLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEgsQ0FBQztRQUVELE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQztJQUVELFlBQVksQ0FBQyxXQUF3QixFQUFFLFlBQW9CLEtBQUs7UUFDNUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQixNQUFNLFNBQVMsR0FBa0MsRUFBRSxDQUFDO1FBRXBELE1BQU0sQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTVELFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7UUFDN0UsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsV0FBdUI7UUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUzQixNQUFNLGFBQWEsR0FBbUMsRUFBRSxDQUFDO1FBRXpELE1BQU0sQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLEVBQUU7WUFDcEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbG9vciB9IGZyb20gXCIuL0Zsb29yXCI7XG5pbXBvcnQgeyBUaWNrZXRDb250cm9sbGVyIH0gZnJvbSBcIi4vVGlja2V0Q29udHJvbGxlclwiO1xuaW1wb3J0IHsgSVBhcmtpbmdTdHJhdGVneSwgSUZsb29yLCBJVmVoaWNsZSwgSVRpY2tldCwgVmVoaWNsZVR5cGUsIElTbG90IH0gZnJvbSBcIi4vdHlwZVwiO1xuXG5cbmV4cG9ydCBjbGFzcyBQYXJraW5nTG90e1xuICAgIGlkOnN0cmluZztcbiAgICBwYXJraW5nU3RyYXRlZ3k6IElQYXJraW5nU3RyYXRlZ3k7XG4gICAgZmxvb3JzIDogQXJyYXk8SUZsb29yPjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihpZDpzdHJpbmcsIHBhcmtpbmdTdHJhdGVneTpJUGFya2luZ1N0cmF0ZWd5KSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wYXJraW5nU3RyYXRlZ3kgPSBwYXJraW5nU3RyYXRlZ3k7XG4gICAgICAgIHRoaXMuZmxvb3JzID0gW107XG4gICAgfVxuXG4gICAgLy8gYWRkIGZsb29ycywgYWRkc2xvdHNcblxuICAgIHNldFBhcmtpbmdTdHJhdGVneShwYXJraW5nU3RyYXRlZ3k6SVBhcmtpbmdTdHJhdGVneSl7XG4gICAgICAgIHRoaXMucGFya2luZ1N0cmF0ZWd5ID0gcGFya2luZ1N0cmF0ZWd5O1xuICAgIH1cblxuICAgIC8vIGFkZEZsb29yc1xuICAgIGFkZEZsb29ycyhmbG9vcnM6bnVtYmVyKXtcbiAgICAgICAgZm9yKGxldCBpPTE7IGk8PWZsb29yczsgaSsrKXtcbiAgICAgICAgICAgIHRoaXMuZmxvb3JzLnB1c2gobmV3IEZsb29yKGkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgXG5cbiAgICBwYXJrVmVoaWNsZSh2ZWhpY2xlOklWZWhpY2xlKSA6IElUaWNrZXQgfCB1bmRlZmluZWR7XG5cbiAgICAgICAgY29uc3Qgc2xvdFRvQm9vayA9IHRoaXMucGFya2luZ1N0cmF0ZWd5LnBhcmsodGhpcy5mbG9vcnMsIHZlaGljbGUpO1xuXG4gICAgICAgIGlmKHNsb3RUb0Jvb2spe1xuICAgICAgICAgICAgLy8gcmV0dXJuIHRpY2tldFxuICAgICAgICAgICAgY29uc3QgdGlja2V0ID0gVGlja2V0Q29udHJvbGxlci5nZW5lcmF0ZVRpY2tldCh0aGlzLmlkLCBzbG90VG9Cb29rLmlkLCBzbG90VG9Cb29rLmZsb29ySWQsIHZlaGljbGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGlja2V0XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHVucGFya1ZlaGljbGUodGlja2V0SWQ6c3RyaW5nKXtcbiAgICAgICAgY29uc3QgdGlja2V0ID0gVGlja2V0Q29udHJvbGxlci5nZXRUaWNrZXRXaXRoSWQodGlja2V0SWQpO1xuXG4gICAgICAgIGlmKHRpY2tldCl7XG4gICAgICAgICAgICBjb25zdCBbX3BhcmtpbmdMb3RJZCwgZmxvb3JJZCwgc2xvdElkXSA9IHRpY2tldElkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICBjb25zdCBmbG9vciA9IHRoaXMuZmxvb3JzW051bWJlcihmbG9vcklkKSAtIDFdO1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGZsb29yLnNsb3RzW051bWJlcihzbG90SWQpIC0gMV07XG4gICAgICAgICAgICBzbG90LnJlbGVhc2UoKTtcbiAgICAgICAgICAgIFRpY2tldENvbnRyb2xsZXIuZGVsZXRlVGlja2V0KHRpY2tldElkKTtcblxuICAgICAgICAgICAgcmV0dXJuIGBVbnBhcmtlZCB2ZWhpY2xlIHdpdGggUmVnaXN0cmF0aW9uIE51bWJlciA6ICR7dGlja2V0LnZlaGljbGUucmVnTm99IGFuZCBDb2xvcjogJHt0aWNrZXQudmVoaWNsZS5jb2xvcn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwiSW52YWxpZCB0aWNrZXRcIjtcbiAgICB9XG5cbiAgICBnZXRGcmVlU2xvdHModmVoaWNsZVR5cGU6IFZlaGljbGVUeXBlLCBzaG93U2xvdHM6Ym9vbGVhbiA9IGZhbHNlKXtcbiAgICAgICAgY29uc3QgZmxvb3JzID0gdGhpcy5mbG9vcnM7XG4gICAgICAgIGNvbnN0IGZyZWVTbG90czp7IFt4OnN0cmluZ10gOiBJU2xvdFtdfG51bWJlcn0gPSB7fTtcblxuICAgICAgICBmbG9vcnMuZm9yRWFjaCggZmxvb3IgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlU2xvdHMgPSBmbG9vci5nZXRBdmFpbGFibGVTbG90cyh2ZWhpY2xlVHlwZSk7XG5cbiAgICAgICAgICAgIGZyZWVTbG90c1tmbG9vci5pZF0gPSBzaG93U2xvdHMgPyBhdmFpbGFibGVTbG90cyA6IGF2YWlsYWJsZVNsb3RzLmxlbmd0aDtcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gZnJlZVNsb3RzO1xuICAgIH1cblxuICAgIGdldE9jY3VwaWVkU2xvdHModmVoaWNsZVR5cGU6VmVoaWNsZVR5cGUpe1xuICAgICAgICBjb25zdCBmbG9vcnMgPSB0aGlzLmZsb29ycztcblxuICAgICAgICBjb25zdCBvY2N1cGllZFNsb3RzOnsgW3g6c3RyaW5nXTogSVNsb3RbXSB8IG51bWJlcn0gPSB7fTtcblxuICAgICAgICBmbG9vcnMuZm9yRWFjaCggZmxvb3IgPT4ge1xuICAgICAgICAgICAgb2NjdXBpZWRTbG90c1tmbG9vci5pZF0gPSBmbG9vci5nZXRPY2N1cGllZFNsb3RzKHZlaGljbGVUeXBlKTtcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gb2NjdXBpZWRTbG90cztcbiAgICB9XG5cbn0iXX0=